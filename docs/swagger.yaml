basePath: /api/v1
definitions:
  domain.Container:
    properties:
      all_container_lifecycles:
        items:
          $ref: '#/definitions/domain.ContainerLifecycle'
        type: array
      container_port:
        type: integer
      created_at:
        type: string
      endpoint:
        items:
          $ref: '#/definitions/domain.Endpoint'
        type: array
      env:
        items:
          type: string
        type: array
      id:
        description: ini cuma id row di table container
        type: string
      image:
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          / field dibawah ini cuma dari docker engine && bukan dari db
          tapi kalau container udah diterminate gak bisa fetch field dibawah ini
        type: object
      limit:
        $ref: '#/definitions/domain.Resource'
      name:
        type: string
      public_port:
        type: integer
      replica:
        type: integer
      replica_available:
        description: from docker
        type: integer
      reservation:
        $ref: '#/definitions/domain.Resource'
      service_id:
        description: id dari containernya/servicenya
        type: string
      status:
        $ref: '#/definitions/domain.ServiceStatus'
      terminated_time:
        type: string
      user_id:
        type: string
    type: object
  domain.ContainerAction:
    enum:
    - CREATE
    - START
    - STOP
    - TERMINATE
    type: string
    x-enum-varnames:
    - CreateContainer
    - StartContainer
    - StopContainer
    - TerminateContainer
  domain.ContainerLifecycle:
    properties:
      containerId:
        type: string
      id:
        type: string
      replica:
        type: integer
      start_time:
        type: string
      status:
        $ref: '#/definitions/domain.ContainerStatus'
      stop_time:
        type: string
    type: object
  domain.ContainerStatus:
    enum:
    - RUN
    - STOP
    type: string
    x-enum-varnames:
    - ContainerStatusRUN
    - ContainerStatusSTOPPED
  domain.Endpoint:
    description: port container
    properties:
      protocol:
        default: tcp
        type: string
      published_port:
        type: integer
      target_port:
        type: integer
    type: object
  domain.Resource:
    description: ini resource cpus & memory buat setiap container nya
    properties:
      cpus:
        description: cpu dalam milicpu (1000 cpus = 1 vcpu)
        type: integer
      memory:
        description: memory dalam satuan mb (1000mb = 1gb)
        type: integer
    type: object
  domain.ServiceStatus:
    enum:
    - CREATED
    - RUN
    - STOPPED
    - TERMINATED
    type: string
    x-enum-varnames:
    - ServiceCreated
    - ServiceRun
    - ServiceStopped
    - ServiceTerminated
  domain.TimeFormat:
    enum:
    - MONTH
    - DAY
    - HOUR
    - MINUTE
    - SECOND
    type: string
    x-enum-varnames:
    - Month
    - Day
    - Hour
    - Minute
    - Second
  router.ResponseError:
    description: error message
    properties:
      message:
        type: string
    type: object
  router.createContainerResp:
    description: response body endpoint membuat container
    properties:
      container:
        $ref: '#/definitions/domain.Container'
      message:
        type: string
    type: object
  router.createServiceReq:
    description: request body untuk membuat container
    properties:
      endpoint:
        items:
          $ref: '#/definitions/domain.Endpoint'
        type: array
      env:
        items:
          type: string
        type: array
      image:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      limit:
        $ref: '#/definitions/domain.Resource'
      name:
        type: string
      replica:
        type: integer
      reservation:
        $ref: '#/definitions/domain.Resource'
    required:
    - endpoint
    - image
    - limit
    - name
    - replica
    type: object
  router.deleteRes:
    description: response body yg isinnya message success doang
    properties:
      message:
        type: string
    type: object
  router.getContainerRes:
    description: mendapatkan container user berdasarkan id container
    properties:
      container:
        $ref: '#/definitions/domain.Container'
    type: object
  router.getUserContainersResp:
    description: response GetUsersContainer
    properties:
      containers:
        items:
          $ref: '#/definitions/domain.Container'
        type: array
    type: object
  router.scaleReq:
    description: request body horizontal scaling
    properties:
      replica:
        type: integer
    type: object
  router.scheduleContainerReq:
    description: request body menjadwalkan start/stop/terminate container
    properties:
      action:
        $ref: '#/definitions/domain.ContainerAction'
      id:
        type: string
      scheduled_time:
        type: integer
      time_format:
        $ref: '#/definitions/domain.TimeFormat'
    required:
    - action
    - id
    - scheduled_time
    - time_format
    type: object
  router.scheduleCreateReq:
    description: request body penjadwalan pembuatan container
    properties:
      action:
        $ref: '#/definitions/domain.ContainerAction'
      container:
        $ref: '#/definitions/router.scheduleCreateServiceReq'
      scheduled_time:
        type: integer
      time_format:
        $ref: '#/definitions/domain.TimeFormat'
    required:
    - action
    - container
    - scheduled_time
    - time_format
    type: object
  router.scheduleCreateServiceReq:
    properties:
      endpoint:
        items:
          $ref: '#/definitions/domain.Endpoint'
        type: array
      env:
        items:
          type: string
        type: array
      image:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      limit:
        $ref: '#/definitions/domain.Resource'
      name:
        type: string
      replica:
        type: integer
      reservation:
        $ref: '#/definitions/domain.Resource'
      user_id:
        type: string
    type: object
  router.updateRes:
    description: response body isinya message success doang
    properties:
      message:
        type: string
    type: object
host: 103.175.219.0:8888
info:
  contact:
    name: lintang
    url: uyayiu123@gmail.com
  description: container service dogker
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: go-container-service-lintang
  version: "1.0"
paths:
  /{id}/schedule:
    post:
      consumes:
      - application/json
      description: menjadwalkan start/stop/terminate container
      parameters:
      - description: request body penjadwalan start/stop/terminate container
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/router.scheduleContainerReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.deleteRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ResponseError'
      security:
      - Authorization: []
      summary: menjadwalkan start/stop/terminate container
      tags:
      - containers
  /containers:
    get:
      description: Mendapatkan semua swarm service milik user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.getUserContainersResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ResponseError'
      security:
      - Authorization: []
      summary: Mendapatkan semua swarm service milik user
      tags:
      - containers
    post:
      consumes:
      - application/json
      description: User Membuat swarm service lewat endpoint ini
      parameters:
      - description: request body membuat container
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/router.createServiceReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.createContainerResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ResponseError'
      security:
      - Authorization: []
      summary: User Membuat swarm service lewat endpoint inieperti pada postman (bearer
        access token saja
      tags:
      - containers
  /containers/{id}:
    delete:
      description: delete user swarm service
      parameters:
      - description: container id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.deleteRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ResponseError'
      security:
      - Authorization: []
      summary: delete user swarm service
      tags:
      - containers
    get:
      description: Mendapatkan swarm service user berdasarkan id
      parameters:
      - description: container id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.getContainerRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ResponseError'
      security:
      - Authorization: []
      summary: Mendapatkan swarm service user berdasarkan id
      tags:
      - containers
    put:
      consumes:
      - application/json
      description: update swarm service user (bisa juga vertical scaling disini)
      parameters:
      - description: container id
        in: path
        name: id
        required: true
        type: string
      - description: request body update container
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/router.createServiceReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.updateRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ResponseError'
      security:
      - Authorization: []
      summary: update swarm service user (bisa juga vertical scaling disini)
      tags:
      - containers
  /containers/{id}/scale:
    put:
      description: horizontal scaling container user
      parameters:
      - description: container id
        in: path
        name: id
        required: true
        type: string
      - description: request body horizontal scaling
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/router.scaleReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.updateRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ResponseError'
      security:
      - Authorization: []
      summary: horizontal scaling container user
      tags:
      - containers
  /containers/{id}/start:
    post:
      description: run container user
      parameters:
      - description: container id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.getContainerRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ResponseError'
      security:
      - Authorization: []
      summary: run container user
      tags:
      - containers
  /containers/{id}/stop:
    post:
      description: stop container user
      parameters:
      - description: container id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.deleteRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ResponseError'
      security:
      - Authorization: []
      summary: stop container user
      tags:
      - containers
  /containers/upload:
    post:
      consumes:
      - application/json
      description: User Membuat swarm service tetapi source code (tarfile) nya dia
        upload  lewat endpoint ini
      parameters:
      - collectionFormat: csv
        in: formData
        items:
          type: string
        name: env
        type: array
      - in: formData
        name: imageName
        required: true
        type: string
      - in: formData
        name: name
        required: true
        type: string
      - in: formData
        name: replica
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.createContainerResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ResponseError'
      security:
      - Authorization: []
      summary: User Membuat swarm service tetapi source code (tarfile) nya dia upload
        ,lewat endpoint inieperti pada postman (bearer access token saja
      tags:
      - containers
  /create/schedule:
    post:
      consumes:
      - application/json
      description: menjadwalkan pembuatan container
      parameters:
      - description: request body penjadwalan pembuatan container
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/router.scheduleCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.deleteRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ResponseError'
      security:
      - Authorization: []
      summary: menjadwalkan pembuatan container
      tags:
      - containers
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
